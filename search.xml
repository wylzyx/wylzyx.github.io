<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>智能指针</title>
    <url>/2019/12/21/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h5 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h5><p>RAII是一种利用对象生命周期来控制程序资源，在对象构造时获取资源，接着控制对资源的访问使之在对象的生命周期内始终保持有效，最后在对象析构的时候释放资源</p>
<h5 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h5><p>为什么需要智能指针？<br>智能指针是一种预防型的内存泄漏的解决方案,  智能指针在C++没有垃圾回收器环境下，可以很好的解决异常安全等带来的内存泄漏问题， </p>
<p>智能指针的原理</p>
<ol>
<li>RAII特性</li>
<li>重载operator*和operator-&gt;,具有像指针一样的行为</li>
</ol>
<h5 id="std-auto-ptr"><a href="#std-auto-ptr" class="headerlink" title="std::auto_ptr"></a>std::auto_ptr</h5><p>C++98版本的库中就提供了auto_ptr的智能指针</p>
<p>auto_ptr的问题：当对象拷贝或者赋值后，前面的对象就悬空了,禁止使用</p>
<p>auto_ptr的实现原理：管理权转移的思想</p>
<h5 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h5><p>C++11中开始提供更靠谱的unique_ptr </p>
<p>unique_ptr的实现原理：简单粗暴的防拷贝</p>
<p>C++98防拷贝的方式：只声明不实现+声明成私有        </p>
<p>C++11防拷贝的方式：delete </p>
<h5 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h5><p>shared_ptr的原理：是通过引用计数的方式来实现多个shared_ptr对象之间共享资源</p>
<ol>
<li>shared_ptr在其内部，给每个资源都维护了着一份计数，用来记录该份资源被几个对象共享</li>
<li>在对象被销毁时(也就是析构函数调用)，就说明自己不使用该资源了，对象的引用计数减一</li>
<li>如果引用计数是0，就说明自己是最后一个使用该资源的对象，必须释放该资源</li>
<li>如果不是0，就说明除了自己还有其他对象在使用该份资源，不能释放该资源，否则其他对象就成野指针了</li>
</ol>
<p>shared_ptr的线程安全问题</p>
<ol>
<li>智能指针对象中引用计数是多个智能指针对象共享的，两个线程中智能指针的引用计数同时++或–，这个操作不是原子的，引用计数原来是1，++了两次，可能还是2。这样引用计数就错乱了,会导致资源未释放或者程序崩溃的问题。所以智能指针中引用计数++、–是需要加锁的，也就是说引用计数的操作是线程安全的</li>
<li>智能指针管理的对象存放在堆上，两个线程中同时去访问，会导致线程安全问题</li>
</ol>
<p>shared_ptr的循环引用<br>解决方案：在引用计数的场景下，把节点中的_prev和_next改成weak_ptr就可以了<br>原理:  node1-&gt;_next = node2和node2-&gt;_prev = node1时,weak_ptr的_next和_prev不会增加 node1和node2的引用计数。 </p>
<h5 id="C-11和boost中智能指针的关系"><a href="#C-11和boost中智能指针的关系" class="headerlink" title="C++11和boost中智能指针的关系"></a>C++11和boost中智能指针的关系</h5><ol>
<li>C++ 98 中产生了第一个智能指针auto_ptr</li>
<li>C++ boost给出了更实用的scoped_ptr和shared_ptr和weak_ptr</li>
<li>C++ TR1，引入了shared_ptr等。不过注意的是TR1并不是标准版</li>
<li>C++11，引入了unique_ptr和shared_ptr和weak_ptr。需要注意的是unique_ptr对应boost的 scoped_ptr。并且这些智能指针的实现原理是参考boost中的实现的</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>vim常用指令</title>
    <url>/2019/12/15/vim%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2019/12/07/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<hr>
<h6 id="继承概念"><a href="#继承概念" class="headerlink" title="继承概念"></a>继承概念</h6><p>继承是面向对象程序设计使代码可以复用的最重要的手段，它允许在保持原有类特性的基础上进行扩展，增加功能，这样产生新的类，称派生类。继承呈现了面向对象程序设计的层次结构，体现了由简单到复杂的认知过程。以前我们接触的复用都是函数复用，继承是类设计层次的复用。</p>
<h6 id="继承定义"><a href="#继承定义" class="headerlink" title="继承定义"></a>继承定义</h6><p><code>class Person：public Student</code></p>
<p>Person是父类，也称作基类，Student是子类，也称作派生类，public是继承方式</p>
<h6 id="继承基类成员访问方式的变化"><a href="#继承基类成员访问方式的变化" class="headerlink" title="继承基类成员访问方式的变化"></a>继承基类成员访问方式的变化</h6><table>
<thead>
<tr>
<th>类成员/继承方式</th>
<th align="left">public继承</th>
<th>protected继承</th>
<th>private继承</th>
</tr>
</thead>
<tbody><tr>
<td>基类的public成员</td>
<td align="left">派生类的public成员</td>
<td>派生类的protected成员</td>
<td>派生类的private成员</td>
</tr>
<tr>
<td>基类的protected成员</td>
<td align="left">派生类的protected成员</td>
<td>派生类的protected成员</td>
<td>派生类的private成员</td>
</tr>
<tr>
<td>基类的private成员</td>
<td align="left">在派生类中不可见</td>
<td>在派生类中不可见</td>
<td>在派生类中不可见</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>类与对象--上</title>
    <url>/2019/12/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1-%E4%B8%8A/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="类与对象的初步认知"><a href="#类与对象的初步认知" class="headerlink" title="类与对象的初步认知"></a>类与对象的初步认知</h1><h1 id="类的引入"><a href="#类的引入" class="headerlink" title="类的引入"></a>类的引入</h1><h1 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h1><h1 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h1><h1 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h1><h1 id="类的访问限定符及封装"><a href="#类的访问限定符及封装" class="headerlink" title="类的访问限定符及封装"></a>类的访问限定符及封装</h1><h1 id="类的对象大小的计算"><a href="#类的对象大小的计算" class="headerlink" title="类的对象大小的计算"></a>类的对象大小的计算</h1><h1 id="类成员函数的this指针"><a href="#类成员函数的this指针" class="headerlink" title="类成员函数的this指针"></a>类成员函数的this指针</h1>]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>进程概念</title>
    <url>/2019/12/04/%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h4><p> 冯诺依曼：奠定了现代计算机的硬件体系结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span></pre></td></tr><tr><td class="code"><pre><span class="line">A(输入设备) --&gt;B(储存器)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    B --&gt; C(输出设备)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	B --&gt; D(中央处理器)</span></pre></td></tr><tr><td class="code"><pre><span class="line">D --&gt; B</span></pre></td></tr></table></figure>

<p>输入设备：键盘,  鼠标，扫描仪,  写板,  网卡</p>
<p>输出设备：显示器，打印机， 网卡</p>
<p>存储器：内存</p>
<p>中央处理器(CPU)：运算器，控制器</p>
<h4 id="操作系统-OS"><a href="#操作系统-OS" class="headerlink" title="操作系统(OS)"></a>操作系统(OS)</h4><p>操作系统包括：</p>
<ul>
<li>内核（进程管理，内存管理，文件管理，驱动管理）</li>
<li>其他程序（例如函数库，shell程序等） </li>
</ul>
<p>操作系统 = 操作系统内核 + 一组应用  </p>
<p>操作系统是一个管理的软件，管理的是计算机的软硬件资源<br>管理 = 描述 + 组织的方式  </p>
<h4 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h4><p>啥是程序，啥是进程<br>程序就是一个编译完成后的可执行程序，换句话说就是普通文本<br>进程就是程序运行起来的实体  </p>
<p>描述进程</p>
<p>task_struct –&gt; 进程控制块 –&gt; PCB</p>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><h4 id="程序地址空间"><a href="#程序地址空间" class="headerlink" title="程序地址空间"></a>程序地址空间</h4><h4 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h4>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>搭建个人博客1.0的心得小结</title>
    <url>/2019/12/03/%E5%BF%83%E5%BE%97%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>  经过几天的学习，翻阅大佬的博客，查找有关的文档，简陋的个人博客总算是搭建起来的。万事开头难，刚开始的时候确实会有一点难度，很多指令步骤都稀里糊涂的，不知道为什么，干什么用的，因此也尝试了很多次。在一次次的尝试之后，慢慢的也就了解了整个过程的步骤和原理。<br>  个人博客1.0版本的基本内容都已经配置好了，虽然有些简陋，但相较于原始的主题已经有了很大的改善了，一些必要的东西在今后再慢慢地补充吧。今后的任务就是继续完善博客的配置和维护博客了，使用自己搭建的博客会比使用现成的博客更加有趣，在这个过程中也学习到了很多不一样的东西，今后继续加油吧！</p>
]]></content>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>hello</title>
    <url>/2019/12/02/hello/</url>
    <content><![CDATA[<p>this is the first test for my blog</p>
]]></content>
  </entry>
</search>
